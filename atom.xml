<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Abbey in Cradle Studio]]></title>
  <subtitle><![CDATA[年少轻狂 | 立志成为一名游戏开发极客]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.abbeychenxi.net/"/>
  <updated>2014-09-28T05:40:31.745Z</updated>
  <id>http://www.abbeychenxi.net/</id>
  
  <author>
    <name><![CDATA[Abbey]]></name>
    <email><![CDATA[Abbeychenx@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Node.js 入门]]></title>
    <link href="http://www.abbeychenxi.net/2014/09/23/Node-js-%E5%85%A5%E9%97%A8/"/>
    <id>http://www.abbeychenxi.net/2014/09/23/Node-js-入门/</id>
    <published>2014-09-23T11:43:54.000Z</published>
    <updated>2014-09-23T16:19:06.000Z</updated>
    <content type="html"><![CDATA[<h2 id="一个完整的基于Node-js的web应用">一个完整的基于Node.js的web应用</h2>
<h1 id="用例">用例</h1>
<ul>
<li>用户通过浏览器使用我们的应用。</li>
<li>当用户请求<a href="http://domain/start时，" target="_blank" rel="external">http://domain/start时，</a> 可以看到一个欢迎页面，页面上有一个文件上传的表单。</li>
<li>用户可以选择一个图片并提交表单，随后文件将被上传到<a href="http://domain/upload,该页面完成上传后会把图片显示在页面上。" target="_blank" rel="external">http://domain/upload,该页面完成上传后会把图片显示在页面上。</a></li>
</ul>
<h1 id="应用不同模块分析">应用不同模块分析</h1>
<ul>
<li>需要提供Web页面，因此需要一个HTTP服务器</li>
<li>对于不同的请求，根据请求的URL，我们服务器给予不同的响应，因此需要一个路由，用于把请求对应到请求处理程序</li>
<li>当请求被服务器接收并通过路由传递之后，需要可以对其进行处理，需要最终的请求处理程序</li>
<li>路由还应该能处理POST数据，并且把数据封装成更友好的格式传递给请求处理程序，因此需要请求数据处理功能</li>
<li>我们不仅仅要处理URL对应的请求，还要把内容显示出来，这意味着我们需要一些视图逻辑供请求处理程序使用，以便将内容发送给用户的浏览器</li>
<li>最后，用户需要上传图片，所以需要上传处理功能</li>
</ul>
<h1 id="一个基础的HTTP服务器">一个基础的HTTP服务器</h1>
<p>服务器模块：创建一个server.js</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var http = require(<span class="string">"http"</span>);</div><div class="line">http.createServer(<span class="keyword">function</span>(<span class="built_in">request</span>, <span class="built_in">response</span>) {</div><div class="line">	<span class="built_in">response</span>.writeHead(<span class="number">200</span>, {<span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>});</div><div class="line">	<span class="built_in">response</span>.write(<span class="string">"Hello World"</span>);</div><div class="line">	<span class="built_in">response</span>.<span class="keyword">end</span>();</div><div class="line">}).listen(<span class="number">8888</span>);</div></pre></td></tr></table></figure>

<h1 id="分析HTTP服务器">分析HTTP服务器</h1>
<p>引入一个http模块并复制给http变量，接下来调用createServer函数。<br>这个函数返回一个对象，并调用listen方法，指定http服务器监听的端口号。</p>
<h1 id="函数传递">函数传递</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">execute</span><span class="params">(someFunction, value)</span> </span>{</div><div class="line">	someFunction(value);</div><div class="line">}</div><div class="line"></div><div class="line">excute(<span class="function"><span class="keyword">function</span><span class="params">(word)</span> </span>{<span class="built_in">console</span>.log (word) }, <span class="string">"hello"</span>);</div></pre></td></tr></table></figure>

<h1 id="函数传递是如何让HTTP服务器工作的">函数传递是如何让HTTP服务器工作的</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var http = require(<span class="string">"http"</span>);</div><div class="line"></div><div class="line"><span class="keyword">function</span> onRequest(<span class="built_in">request</span>, <span class="built_in">response</span>) {</div><div class="line">	<span class="built_in">response</span>.writeHead(<span class="number">200</span>, {<span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>});</div><div class="line">	<span class="built_in">response</span>.write(<span class="string">"hello world"</span>);</div><div class="line">	<span class="built_in">response</span>.<span class="keyword">end</span>();</div><div class="line">}</div><div class="line"></div><div class="line">http.createServer(onRequest).listen(<span class="number">8888</span>);</div></pre></td></tr></table></figure>

<h1 id="基于事件的驱动回调">基于事件的驱动回调</h1>
<p><a href="http://debuggable.com/posts/understanding-node-js:4bd98440-45e4-4a9a-8ef7-0f7ecbdd56cb" target="_blank" rel="external">Understanding node.js</a>介绍了一些背景知识。</p>
<p>服务器收到HTTP请求的时候是异步的，请求任何时候都可能到达，但是我们服务器却跑在一个单进程中。</p>
<h1 id="服务器是如何处理请求的">服务器是如何处理请求的</h1>
<p>收到请求的时候，使用reponse.writeHead()函数发送一个HTTP状态200和HTTP头的内容类型，使用response.write()函数在HTTP相应主体中发送文本“Hello World”。<br>最后，调用response.end()完成响应。</p>
<p>把服务器脚本放到一个start函数里，然后导出这个函数。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span><span class="params">()</span> </span>{</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">onRequest</span><span class="params">(request, response)</span> </span>{</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">"Request received."</span>);</div><div class="line">		response.writeHead(<span class="number">200</span>, {<span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>});</div><div class="line">		response.write(<span class="string">"Hello World"</span>);</div><div class="line">		response.end();</div><div class="line">	}</div><div class="line">	http.createServer(onRequest).listen(<span class="number">8888</span>);</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"Server has started."</span>);</div><div class="line">}</div><div class="line"></div><div class="line">exports.start = start;</div></pre></td></tr></table></figure>

<p>在index.js文件中写入：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> server = <span class="built_in">require</span>(<span class="string">"./server"</span>);</div><div class="line"></div><div class="line">server.start();</div></pre></td></tr></table></figure>

<h1 id="如何来进行请求的“路由”">如何来进行请求的“路由”</h1>
<p>数据都会包含在request对象中，该对象作为onRequest()回调函数的第一个参数传递。为了解析这些数据，需要额外的Node.js模块，分别是url和querystring模块。</p>
<pre><code>                           url.parse(string).query
                                       <span class="string">|</span>
       url.parse(string).pathname      <span class="string">|</span>
                   <span class="string">|                   |</span>
                   <span class="string">|                   |</span>
                 ------ -------------------
http:<span class="comment">//localhost:8888/start?foo=bar&amp;hello=world</span>
                            ---       -----
                             <span class="string">|          |</span>
                             <span class="string">|          |</span>
          querystring(string)[<span class="string">"foo"</span>]    <span class="string">|</span>
                                        <span class="string">|</span>
                     querystring(string)[<span class="string">"hello"</span>]
</code></pre><p>现在给onRequest()函数加上逻辑，用来找出浏览器请求的URL路径:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">"url"</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span><span class="params">()</span> </span>{</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">onRequest</span><span class="params">(request, response)</span> </span>{</div><div class="line">		<span class="keyword">var</span> pathname = url.parse(request.url).pathname;</div><div class="line">		<span class="built_in">console</span>.log(<span class="string">"Request for "</span> + pathname + <span class="string">" received."</span>);</div><div class="line">		response.writeHead(<span class="number">200</span>, {<span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>});</div><div class="line">		response.write(<span class="string">"Hello World"</span>);</div><div class="line">		response.end();</div><div class="line">	}</div><div class="line">	http.createServer(onRequest).listen(<span class="number">8888</span>);</div><div class="line">}</div><div class="line"></div><div class="line">exports.start = start;</div></pre></td></tr></table></figure>

<p>编写路由：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">route</span><span class="params">(pathname)</span> </span>{</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"About to route a request for "</span> + pathname);</div><div class="line">}</div><div class="line"></div><div class="line">exports.route = route;</div></pre></td></tr></table></figure>

<p>服务器应当知道路由的存在并且加以利用。可以使用依赖注入的方式较松散地添加路由模块。<a href="http://martinfowler.com/articles/injection.html" target="_blank" rel="external">Martin Fowlers 关于依赖注入</a>的文章来作为背景知识。</p>
<p>扩展start()函数</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">"url"</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span><span class="params">(route)</span> </span>{</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onRequest</span><span class="params">(request, response)</span> </span>{</div><div class="line">    <span class="keyword">var</span> pathname = url.parse(request.url).pathname;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Request for "</span> + pathname + <span class="string">" received."</span>);</div><div class="line"></div><div class="line">    route(pathname);</div><div class="line"></div><div class="line">    response.writeHead(<span class="number">200</span>, {<span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>});</div><div class="line">    response.write(<span class="string">"Hello World"</span>);</div><div class="line">    response.end();</div><div class="line">  }</div><div class="line"></div><div class="line">  http.createServer(onRequest).listen(<span class="number">8888</span>);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Server has started."</span>);</div><div class="line">}</div><div class="line"></div><div class="line">exports.start = start;</div></pre></td></tr></table></figure>

<p>相应的扩展index.js，使得路由函数可以被注入到服务器中</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> server = <span class="built_in">require</span>(<span class="string">"./server"</span>);</div><div class="line"><span class="keyword">var</span> router = <span class="built_in">require</span>(<span class="string">"./router"</span>);</div><div class="line"></div><div class="line">server.start(router.route);</div></pre></td></tr></table></figure>

<h1 id="行为驱动执行">行为驱动执行</h1>
<p>Steve Yegge<a href="http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html" target="_blank" rel="external">名词王国中的死刑</a>帮助理解函数编程</p>
<h1 id="路由给真正的请求处理程序">路由给真正的请求处理程序</h1>
<p>创建一个requestHandlers的模块：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span><span class="params">()</span> </span>{</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"Request handler 'start' was called."</span>);</div><div class="line">}</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload</span><span class="params">()</span> </span>{</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"Request handler 'upload' was called."</span>);</div><div class="line">}</div><div class="line"></div><div class="line">exports.start = start;</div><div class="line">exports.upload = upload;</div></pre></td></tr></table></figure>

<p>在javascript中，对象就是一个键/值对的集合—你可以把javascript的对象想象成一个键为字符串类型的字典。</p>
<p>将对象引入到index.js：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">var</span> server <span class="subst">=</span> <span class="keyword">require</span>(<span class="string">"./server"</span>);</div><div class="line"><span class="built_in">var</span> router <span class="subst">=</span> <span class="keyword">require</span>(<span class="string">"./router"</span>);</div><div class="line"><span class="built_in">var</span> requestHandlers <span class="subst">=</span> <span class="keyword">require</span>(<span class="string">"./requestHandlers"</span>);</div><div class="line"></div><div class="line"><span class="built_in">var</span> <span class="keyword">handle</span> <span class="subst">=</span> {};</div><div class="line"><span class="keyword">handle</span><span class="preprocessor">[</span><span class="string">"/"</span><span class="preprocessor">]</span><span class="markup"> = requestHandlers.start;</span></div><div class="line">handle<span class="preprocessor">[</span><span class="string">"/start"</span><span class="preprocessor">]</span><span class="markup"> = requestHandlers.start;</span></div><div class="line">handle<span class="preprocessor">[</span><span class="string">"/upload"</span><span class="preprocessor">]</span><span class="markup"> = requestHandlers.upload;</span></div><div class="line"></div><div class="line">server.start(router.route, handle);</div></pre></td></tr></table></figure>

<p>完成了对象的定义之后，把它作为额外的参数传递给服务器，将server.js修改如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">"url"</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span><span class="params">(route, handle)</span> </span>{</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onRequest</span><span class="params">(request, response)</span> </span>{</div><div class="line">    <span class="keyword">var</span> pathname = url.parse(request.url).pathname;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Request for "</span> + pathname + <span class="string">" received."</span>);</div><div class="line"></div><div class="line">    route(handle, pathname);</div><div class="line"></div><div class="line">    response.writeHead(<span class="number">200</span>, {<span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>});</div><div class="line">    response.write(<span class="string">"Hello World"</span>);</div><div class="line">    response.end();</div><div class="line">  }</div><div class="line"></div><div class="line">  http.createServer(onRequest).listen(<span class="number">8888</span>);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Server has started."</span>);</div><div class="line">}</div><div class="line"></div><div class="line">exports.start = start;</div></pre></td></tr></table></figure>

<p>这样我们就在start()函数里添加了handle参数，并且把handle对象作为第一个参数传递给了route()回调函数。<br>修改route.js文件：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">route</span><span class="params">(handle, pathname)</span> </span>{</div><div class="line">	<span class="built_in">console</span>.log(<span class="string">"About to route a request for "</span> + pathname);</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> handle[pathname] === <span class="string">'function'</span>) {</div><div class="line">    handle[pathname]();</div><div class="line">  } <span class="keyword">else</span> {</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"No request handler found for "</span> + pathname);</div><div class="line">  }</div><div class="line">}</div><div class="line"></div><div class="line">exports.route = route;</div></pre></td></tr></table></figure>

<h1 id="阻塞与非阻塞">阻塞与非阻塞</h1>
<p><a href="http://blog.mixu.net/2011/02/01/understanding-the-node-js-event-loop/" target="_blank" rel="external">理解node.js的事件轮询</a></p>
<p>简单又实用的非阻塞操作exec()</p>
<h2 id="以非阻塞操作进行请求响应">以非阻塞操作进行请求响应</h2>
<p>Node.js的实现方案:函数传递。<br>将内容传递给服务器的方式，将服务器“传递”给内容的方式。<br>就是将response对象通过请求路由传递给请求处理程序。随后，处理程序就可以采用该对象上的函数来对请求作出响应。<br>从server.js开始：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">"url"</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span><span class="params">(route, handle)</span> </span>{</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onRequest</span><span class="params">(request, response)</span> </span>{</div><div class="line">    <span class="keyword">var</span> pathname = url.parse(request.url).pathname;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Request for "</span> + pathname + <span class="string">" received."</span>);</div><div class="line"></div><div class="line">    route(handle, pathname, response);</div><div class="line">  }</div><div class="line"></div><div class="line">  http.createServer(onRequest).listen(<span class="number">8888</span>);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Server has started."</span>);</div><div class="line">}</div><div class="line"></div><div class="line">exports.start = start;</div></pre></td></tr></table></figure>

<p>将response对象作为第三个参数传递给route()函数，并且，将onRequest()处理程序中所有有关response的函数调用都移除，因为这部分工作让route()函数完成。</p>
<p>router.js：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> route(handle, pathname, <span class="built_in">response</span>) {</div><div class="line">	console.<span class="built_in">log</span>(<span class="string">"About to route a request for "</span> + pathname);</div><div class="line">	<span class="keyword">if</span>(typeof handle[pathname] === <span class="comment">'function') {</span></div><div class="line">		handle[pathname](<span class="built_in">response</span>);</div><div class="line">	}<span class="keyword">else</span> {</div><div class="line">		console.<span class="built_in">log</span>(<span class="string">"No request handler found for "</span> + pathname);</div><div class="line">    <span class="built_in">response</span>.writeHead(<span class="number">404</span>, {<span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>});</div><div class="line">    <span class="built_in">response</span>.write(<span class="string">"404 Not found"</span>);</div><div class="line">    <span class="built_in">response</span>.<span class="keyword">end</span>();</div><div class="line">  }</div><div class="line">}</div><div class="line"></div><div class="line">exports.route = route;</div></pre></td></tr></table></figure>

<p>将requestHandler.js修改为：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">var exec = require(<span class="string">"child_process"</span>).exec;</div><div class="line"></div><div class="line"><span class="keyword">function</span> start(<span class="built_in">response</span>) {</div><div class="line">  console.<span class="built_in">log</span>(<span class="string">"Request handler 'start' was called."</span>);</div><div class="line"></div><div class="line">  exec(<span class="string">"ls -lah"</span>, <span class="keyword">function</span> (<span class="keyword">error</span>, stdout, stderr) {</div><div class="line">    <span class="built_in">response</span>.writeHead(<span class="number">200</span>, {<span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>});</div><div class="line">    <span class="built_in">response</span>.write(stdout);</div><div class="line">    <span class="built_in">response</span>.<span class="keyword">end</span>();</div><div class="line">  });</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">function</span> upload(<span class="built_in">response</span>) {</div><div class="line">  console.<span class="built_in">log</span>(<span class="string">"Request handler 'upload' was called."</span>);</div><div class="line">  <span class="built_in">response</span>.writeHead(<span class="number">200</span>, {<span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>});</div><div class="line">  <span class="built_in">response</span>.write(<span class="string">"Hello Upload"</span>);</div><div class="line">  <span class="built_in">response</span>.<span class="keyword">end</span>();</div><div class="line">}</div><div class="line"></div><div class="line">exports.start = start;</div><div class="line">exports.upload = upload;</div></pre></td></tr></table></figure>

<h1 id="更有用的场景">更有用的场景</h1>
<ul>
<li>尽管Node.js中处理基础的POST请求相对比较简单，但在这过程中还是能学到很多</li>
<li>用Node.js来处理文件上传比较复杂</li>
</ul>
<h1 id="处理POST请求">处理POST请求</h1>
<p>将requestHandlers.js修改为如下形式：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span><span class="params">(response)</span> {</span></div><div class="line">  <span class="transposed_variable">console.</span>log(<span class="string">"Request handler '</span><span class="transposed_variable">start'</span> was <span class="transposed_variable">called.</span><span class="string">");</span></div><div class="line"></div><div class="line">  var body = '&lt;html&gt;<span class="string">'+</span></div><div class="line">    '&lt;head&gt;<span class="string">'+</span></div><div class="line">    '&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; '</span>+</div><div class="line">    <span class="string">'charset=UTF-8"</span> /&gt;<span class="string">'+</span></div><div class="line">    '&lt;/head&gt;<span class="string">'+</span></div><div class="line">    '&lt;body&gt;<span class="string">'+</span></div><div class="line">    '&lt;form action=<span class="string">"/upload"</span> method=<span class="string">"post"</span>&gt;<span class="string">'+</span></div><div class="line">    '&lt;textarea name=<span class="string">"text"</span> rows=<span class="string">"20"</span> cols=<span class="string">"60"</span>&gt;&lt;/textarea&gt;<span class="string">'+</span></div><div class="line">    '&lt;input type=<span class="string">"submit"</span> value=<span class="string">"Submit text"</span> /&gt;<span class="string">'+</span></div><div class="line">    '&lt;/form&gt;<span class="string">'+</span></div><div class="line">    '&lt;/body&gt;<span class="string">'+</span></div><div class="line">    '&lt;/html&gt;<span class="string">';</span></div><div class="line"></div><div class="line">    response.writeHead(200, {"Content-Type<span class="string">": "</span>text/html<span class="string">"});</span></div><div class="line">    response.write(body);</div><div class="line">    response.end();</div><div class="line">}</div><div class="line"></div><div class="line">function upload(response) {</div><div class="line">  console.log("Request handler <span class="string">'upload'</span> was <span class="transposed_variable">called.</span><span class="string">");</span></div><div class="line">  response.writeHead(200, {"Content-Type<span class="string">": "</span>text/plain<span class="string">"});</span></div><div class="line">  response.write("Hello Upload<span class="string">");</span></div><div class="line">  response.end();</div><div class="line">}</div><div class="line"></div><div class="line">exports.start = start;</div><div class="line">exports.upload = upload;</div></pre></td></tr></table></figure>

<p>为了使得整个过程非阻塞，Node.js会将POST数据拆分成很多小块，然后通过触发特定的事件，将这些小数据库传递给回调函数。</p>
<p>我们需要告诉Node.js当这些事件触发的时候，回调哪些函数。通过在request对象上注册监听器来实现。这里的request对象是每次接收到HTTP请求时候，都会把该对象传递给onRequest回调函数。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">request.addListener(<span class="string">"data"</span>, <span class="function"><span class="keyword">function</span><span class="params">(chunk)</span> </span>{</div><div class="line">  <span class="comment">// called when a new chunk of data was received</span></div><div class="line">});</div><div class="line"></div><div class="line">request.addListener(<span class="string">"end"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">  <span class="comment">// called when all chunks of data have been received</span></div><div class="line">});</div></pre></td></tr></table></figure>

<p>从server.js开始：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</div><div class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">"url"</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span><span class="params">(route, handle)</span> </span>{</div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">onRequest</span><span class="params">(request, response)</span> </span>{</div><div class="line">    <span class="keyword">var</span> postData = <span class="string">""</span>;</div><div class="line">    <span class="keyword">var</span> pathname = url.parse(request.url).pathname;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"Request for "</span> + pathname + <span class="string">" received."</span>);</div><div class="line"></div><div class="line">    request.setEncoding(<span class="string">"utf8"</span>);</div><div class="line"></div><div class="line">    request.addListener(<span class="string">"data"</span>, <span class="function"><span class="keyword">function</span><span class="params">(postDataChunk)</span> </span>{</div><div class="line">      postData += postDataChunk;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">"Received POST data chunk '"</span>+</div><div class="line">      postDataChunk + <span class="string">"'."</span>);</div><div class="line">    });</div><div class="line"></div><div class="line">    request.addListener(<span class="string">"end"</span>, <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>{</div><div class="line">      route(handle, pathname, response, postData);</div><div class="line">    });</div><div class="line"></div><div class="line">  }</div><div class="line"></div><div class="line">  http.createServer(onRequest).listen(<span class="number">8888</span>);</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">"Server has started."</span>);</div><div class="line">}</div><div class="line"></div><div class="line">exports.start = start;</div></pre></td></tr></table></figure>

<p>上述代码做了三件事情：</p>
<ul>
<li>设置了接收数据的编码格式为UTF-8</li>
<li>注册了“data”事件的监听器，用于收集每次接收到的新数据块，并赋值给postData变量</li>
<li>将请求路由的调用移到end事件处理程序中，以确保它只会当所有数据接收完毕后才触发，并且只触发一次。同时把POST数据传递给请求路由，因为数据，请求处理程序会用到</li>
</ul>
<p>在upload页面，展示用户输入的内容。修改router.js：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> route(handle, pathname, <span class="built_in">response</span>, postData) {</div><div class="line">  console.<span class="built_in">log</span>(<span class="string">"About to route a request for "</span> + pathname);</div><div class="line">  <span class="keyword">if</span> (typeof handle[pathname] === <span class="comment">'function') {</span></div><div class="line">    handle[pathname](<span class="built_in">response</span>, postData);</div><div class="line">  } <span class="keyword">else</span> {</div><div class="line">    console.<span class="built_in">log</span>(<span class="string">"No request handler found for "</span> + pathname);</div><div class="line">    <span class="built_in">response</span>.writeHead(<span class="number">404</span>, {<span class="string">"Content-Type"</span>: <span class="string">"text/plain"</span>});</div><div class="line">    <span class="built_in">response</span>.write(<span class="string">"404 Not found"</span>);</div><div class="line">    <span class="built_in">response</span>.<span class="keyword">end</span>();</div><div class="line">  }</div><div class="line">}</div><div class="line"></div><div class="line">exports.route = route;</div></pre></td></tr></table></figure>

<p>然后，在requestHandler.js中，将数据包含在对upload请求的响应中：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span><span class="params">(response, postData)</span> {</span></div><div class="line">  <span class="transposed_variable">console.</span>log(<span class="string">"Request handler '</span><span class="transposed_variable">start'</span> was <span class="transposed_variable">called.</span><span class="string">");</span></div><div class="line"></div><div class="line">  var body = '&lt;html&gt;<span class="string">'+</span></div><div class="line">    '&lt;head&gt;<span class="string">'+</span></div><div class="line">    '&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; '</span>+</div><div class="line">    <span class="string">'charset=UTF-8"</span> /&gt;<span class="string">'+</span></div><div class="line">    '&lt;/head&gt;<span class="string">'+</span></div><div class="line">    '&lt;body&gt;<span class="string">'+</span></div><div class="line">    '&lt;form action=<span class="string">"/upload"</span> method=<span class="string">"post"</span>&gt;<span class="string">'+</span></div><div class="line">    '&lt;textarea name=<span class="string">"text"</span> rows=<span class="string">"20"</span> cols=<span class="string">"60"</span>&gt;&lt;/textarea&gt;<span class="string">'+</span></div><div class="line">    '&lt;input type=<span class="string">"submit"</span> value=<span class="string">"Submit text"</span> /&gt;<span class="string">'+</span></div><div class="line">    '&lt;/form&gt;<span class="string">'+</span></div><div class="line">    '&lt;/body&gt;<span class="string">'+</span></div><div class="line">    '&lt;/html&gt;<span class="string">';</span></div><div class="line"></div><div class="line">    response.writeHead(200, {"Content-Type<span class="string">": "</span>text/html<span class="string">"});</span></div><div class="line">    response.write(body);</div><div class="line">    response.end();</div><div class="line">}</div><div class="line"></div><div class="line">function upload(response, postData) {</div><div class="line">  console.log("Request handler <span class="string">'upload'</span> was <span class="transposed_variable">called.</span><span class="string">");</span></div><div class="line">  response.writeHead(200, {"Content-Type<span class="string">": "</span>text/plain<span class="string">"});</span></div><div class="line">  response.write("<span class="transposed_variable">You'</span>ve sent: <span class="string">" + postData);</span></div><div class="line">  response.end();</div><div class="line">}</div><div class="line"></div><div class="line">exports.start = start;</div><div class="line">exports.upload = upload;</div></pre></td></tr></table></figure>

<p>最后做的是：我们是把请求的整个消息传递给了请求路由和请求处理程序。我们应该只把POST数据中，感兴趣的部分传递给请求路由和请求处理程序。</p>
<p>querystring模块：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">var querystring = require(<span class="string">"querystring"</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span><span class="params">(response, postData)</span> {</span></div><div class="line">  <span class="transposed_variable">console.</span>log(<span class="string">"Request handler '</span><span class="transposed_variable">start'</span> was <span class="transposed_variable">called.</span><span class="string">");</span></div><div class="line"></div><div class="line">  var body = '&lt;html&gt;<span class="string">'+</span></div><div class="line">    '&lt;head&gt;<span class="string">'+</span></div><div class="line">    '&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; '</span>+</div><div class="line">    <span class="string">'charset=UTF-8"</span> /&gt;<span class="string">'+</span></div><div class="line">    '&lt;/head&gt;<span class="string">'+</span></div><div class="line">    '&lt;body&gt;<span class="string">'+</span></div><div class="line">    '&lt;form action=<span class="string">"/upload"</span> method=<span class="string">"post"</span>&gt;<span class="string">'+</span></div><div class="line">    '&lt;textarea name=<span class="string">"text"</span> rows=<span class="string">"20"</span> cols=<span class="string">"60"</span>&gt;&lt;/textarea&gt;<span class="string">'+</span></div><div class="line">    '&lt;input type=<span class="string">"submit"</span> value=<span class="string">"Submit text"</span> /&gt;<span class="string">'+</span></div><div class="line">    '&lt;/form&gt;<span class="string">'+</span></div><div class="line">    '&lt;/body&gt;<span class="string">'+</span></div><div class="line">    '&lt;/html&gt;<span class="string">';</span></div><div class="line"></div><div class="line">    response.writeHead(200, {"Content-Type<span class="string">": "</span>text/html<span class="string">"});</span></div><div class="line">    response.write(body);</div><div class="line">    response.end();</div><div class="line">}</div><div class="line"></div><div class="line">function upload(response, postData) {</div><div class="line">  console.log("Request handler <span class="string">'upload'</span> was <span class="transposed_variable">called.</span><span class="string">");</span></div><div class="line">  response.writeHead(200, {"Content-Type<span class="string">": "</span>text/plain<span class="string">"});</span></div><div class="line">  response.write("<span class="transposed_variable">You'</span>ve sent the text: <span class="string">"+</span></div><div class="line">  querystring.parse(postData).text);</div><div class="line">  response.end();</div><div class="line">}</div><div class="line"></div><div class="line">exports.start = start;</div><div class="line">exports.upload = upload;</div></pre></td></tr></table></figure>

<h2 id="处理文件上传">处理文件上传</h2>
<p>外部模块：Felix Geisendorfer开发的node-formidable模块。</p>
<ul>
<li>在/start表单中添加一个文件上传元素</li>
<li>将node-formidable整合到我们的upload请求处理程序中，用于将上传的图片保存到./test.png</li>
<li>将上传的图片内嵌到/uploadURL输出的HTML中</li>
</ul>
<p>将request对象从服务器开始一路通过请求路由，在传递给请求处理程序。</p>
<p>我们可以将postData从服务器以及请求处理程序中移除—对于我们处理文件上传来说不需要了，另一方面，Node.js不会对数据做缓存</p>
<p>采用fs.renameSync(path1, path2)实现将文件保存到本地目录下</p>
<h2 id="总结与展望">总结与展望</h2>
<p>本书没有涉及到的：如何操作数据库，如何进行单元测试、如何开发Node.js的外部模块以及一些简单的诸如如何获取GET请求之类的方法。</p>
]]></content>
    
    
      <category term="Node.js" scheme="http://www.abbeychenxi.net/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[大教堂与市集-开放源代码软件]]></title>
    <link href="http://www.abbeychenxi.net/2014/09/18/%E5%A4%A7%E6%95%99%E5%A0%82%E4%B8%8E%E5%B8%82%E9%9B%86-%E5%BC%80%E6%94%BE%E6%BA%90%E4%BB%A3%E7%A0%81%E8%BD%AF%E4%BB%B6/"/>
    <id>http://www.abbeychenxi.net/2014/09/18/大教堂与市集-开放源代码软件/</id>
    <published>2014-09-18T06:25:54.000Z</published>
    <updated>2014-09-25T07:52:33.000Z</updated>
    <content type="html"><![CDATA[<h2 id="《大教堂与市集》-开放源代码运动的《圣经》">《大教堂与市集》-开放源代码运动的《圣经》</h2>
<ul>
<li>并行的、点对点的、动态的开发模式（开源）</li>
<li>封闭的、垂直的、集中式的开发模式（大教堂）</li>
</ul>
<h2 id="Linux">Linux</h2>
<h2 id="problem">problem</h2>
<ol>
<li>opensource软件是不是免费的？</li>
<li>买的软件到底是什么？-使用权</li>
</ol>
<h2 id="Fetchmail">Fetchmail</h2>
<h2 id="拥有用户的重要性">拥有用户的重要性</h2>
<ol>
<li>每个好的软件工作都开始于搔到了开发者本人的痒处</li>
<li>好程序员知道该写什么，伟大的程序员知道该重写什么</li>
<li>“计划好抛弃，无论如何，你会的”</li>
<li>如果你有正确的态度，有趣的问题会找上你的</li>
<li>pass</li>
<li>把用户当做协作开发者是快速改进代码和高效调试的无可争辩的方式</li>
</ol>
<h2 id="早发布、常发布">早发布、常发布</h2>
<h2 id="Linus定律">Linus定律</h2>
<ul>
<li>如果有一个足够大的beta测试人员和协作开发人员的基础，几乎所有的问题都可以被快速的找出并被一些人纠正</li>
</ul>
<h2 id="Delphi效应—一群相同专业的观察者的平均观点比在其中随机挑选一个来得更加可靠">Delphi效应—一群相同专业的观察者的平均观点比在其中随机挑选一个来得更加可靠</h2>
<ul>
<li>Delphi效应甚至可以战胜操作系统内核一级的复杂度</li>
<li>Delphi估算法</li>
</ul>
<h2 id="现象">现象</h2>
<ul>
<li>现在高科技公司投入巨额资金发展开源软件，而通常开源软件本身免费。<ul>
<li>google:Android, Chrome</li>
<li>IMB:Eclipse</li>
<li>Intel:Linux</li>
</ul>
</li>
<li>这些公司并不是放弃资本主义，而是认为这是个好的商业策略</li>
</ul>
<h2 id="替代物品和互补物品">替代物品和互补物品</h2>
<ul>
<li>市场上所有的产品都有替代物品和互补物品<ul>
<li>替代物品是首选商品太贵时会</li>
</ul>
</li>
</ul>
]]></content>
    
    
      <category term="NJU" scheme="http://www.abbeychenxi.net/tags/NJU/"/>
    
      <category term="软件工程管理" scheme="http://www.abbeychenxi.net/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[No Silver Bullet]]></title>
    <link href="http://www.abbeychenxi.net/2014/09/15/No-Silver-Bullet/"/>
    <id>http://www.abbeychenxi.net/2014/09/15/No-Silver-Bullet/</id>
    <published>2014-09-15T06:20:40.000Z</published>
    <updated>2014-09-18T06:25:11.000Z</updated>
    <content type="html"><![CDATA[<h2 id="复杂度">复杂度</h2>
<h2 id="一致性">一致性</h2>
<ul>
<li>物理学家面对异常复杂的事物，他们坚信必定存在着某种通用原理。物理学是研究上帝创造的东西</li>
<li>软件开发面对的复杂度往往是随心所欲、毫无规则可言的，来自若干必须遵循的人为惯例和系统。软件开发面对的是人，不是上帝。</li>
<li>很多复杂性来自保持与其它接口的一致</li>
</ul>
<h2 id="可变性">可变性</h2>
<ul>
<li>软件实体经常会遭受到持续的变更压力。<ul>
<li>汽车、建筑可以修改，但是很少有人修改，大家都知道成本很高</li>
<li>软件包含了很多功能</li>
<li>软件可以很容易地进行修改—-它是纯粹思维活动的产物，可以无限扩展</li>
</ul>
</li>
<li>软件变更<ul>
<li>人们要求扩展，更改功能</li>
<li>硬件的变化</li>
</ul>
</li>
<li>软件与整个社会联成一体，后者在不断变动，它强迫软件也跟着变动</li>
</ul>
<h2 id="不可见性">不可见性</h2>
<ul>
<li>软件是不可见的和无法可视化的<ul>
<li>抽象的功能：几何抽象、机械制图、化学分子模型</li>
<li>pass</li>
<li>这限制了个人的设计过程，也严重的阻碍了相互之间的交流</li>
<li>UML</li>
</ul>
</li>
</ul>
<h2 id="没有银弹">没有银弹</h2>
<ul>
<li>相对必要任务而言，软件工程师在次要任务上花费了多少时间和精力？除非它占了所有工作的9/10，否则即使全部次要任务的时间缩减到0，也不会给生成率带来数量级上的提高</li>
</ul>
<h2 id="“自动”编程">“自动”编程</h2>
<h2 id="图形化编程">图形化编程</h2>
<ul>
<li>流程图是一直非常差劲软件结构表达方法。</li>
<li>现在的屏幕非常小，像素级别，无法同时表现软件图形的所有正式、详细的范围和细节。</li>
<li>软件非常难以可视化。</li>
</ul>
<h2 id="程序验证">程序验证</h2>
<ul>
<li>是否有可能出现银弹，能够在系统设计级别、源代码级别消除bug呢？是否可以在大量工作被投入到实现和测试之前，通过采用证实设计正确性的“深奥”策略，彻底提高软件的生产率。</li>
<li>不能保证节约劳动力</li>
<li>程序验证不意味着0缺陷的程序</li>
<li>完美的程序验证只能建立满足技术说明的程序，而这时，软件工作过程中最困难的部分已经接近完成，形成了完整的和一致的说明。</li>
</ul>
<h2 id="环境和工具">环境和工具</h2>
<ul>
<li>IDE</li>
<li>这样的工作是非常有价值的，它能够带来软件生产率和可靠性上的一些提高。但是，由于它自身的特性，目前它的回报很有限。</li>
</ul>
<h2 id="工作站">工作站</h2>
<ul>
<li>硬件速度的加速</li>
<li>编译速度，开发速度</li>
<li>1986！</li>
</ul>
<h2 id="购买和自行开发">购买和自行开发</h2>
<ul>
<li>构建软件最可能的彻底解决方案是不开发任何软件</li>
<li>通用软件</li>
<li>1986！</li>
</ul>
<h2 id="需求精炼和快速原型">需求精炼和快速原型</h2>
<ul>
<li>概念性工作中。。。。</li>
</ul>
<h2 id="增量开发">增量开发</h2>
<ul>
<li>Grow not building</li>
<li>客户</li>
<li>士气</li>
<li>迭代式开发</li>
</ul>
<h2 id="卓越的设计人员">卓越的设计人员</h2>
<ul>
<li>软件开发是一个创造性的过程</li>
</ul>
<h2 id="没有银弹的影响">没有银弹的影响</h2>
<ul>
<li>软件开发本质的认识</li>
<li>软件过程</li>
</ul>
]]></content>
    
    
      <category term="NJU" scheme="http://www.abbeychenxi.net/tags/NJU/"/>
    
      <category term="软件工程管理" scheme="http://www.abbeychenxi.net/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MEAN.js]]></title>
    <link href="http://www.abbeychenxi.net/2014/09/11/MEANjs/"/>
    <id>http://www.abbeychenxi.net/2014/09/11/MEANjs/</id>
    <published>2014-09-11T11:23:46.000Z</published>
    <updated>2014-09-11T11:28:43.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li>MongoDB - Go through MongoDB Official Website and proceed to their Official Manual, which should help you understand NoSQL and MongoDB better.</li>
<li>Express - The best way to understand express is through its Official Website, particularly The Express Guide; you can also go through this StackOverflow Thread for more resources.</li>
<li>AngularJS - Angular’s Official Website is a great starting point. You can also use Thinkster Popular Guide, and the Egghead Videos.</li>
<li>Node.js - Start by going through Node.js Official Website and this StackOverflow Thread, which should get you going with the Node.js platform in no time.</li>
</ul>
]]></content>
    
    
      <category term="MEAN.js" scheme="http://www.abbeychenxi.net/tags/MEAN-js/"/>
    
      <category term="Full-Stack" scheme="http://www.abbeychenxi.net/tags/Full-Stack/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python网络爬虫[七]]]></title>
    <link href="http://www.abbeychenxi.net/2014/09/07/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%5B%E4%B8%83%5D/"/>
    <id>http://www.abbeychenxi.net/2014/09/07/Python网络爬虫[七]/</id>
    <published>2014-09-07T04:50:49.000Z</published>
    <updated>2014-09-07T05:19:02.000Z</updated>
    <content type="html"><![CDATA[<h1 id="正则表达式基础">正则表达式基础</h1>
<hr>
<h2 id="概念">概念</h2>
<p>正则表达式的大致匹配过程是：</p>
<ol>
<li>依次拿出表达式和文本中的字符比较。</li>
<li>如果每一个字符都能匹配，则匹配成功；一旦有匹配不成功的字符则匹配失败。</li>
<li>如果表达式中有量词或边界，这个过程会稍微有一些不同。</li>
</ol>
<p>python支持的正则表达式元字符和语法:<br><img src="http://img.blog.csdn.net/20130515113723855" alt="image"></p>
<h2 id="数量词的贪婪模式与非贪婪模式">数量词的贪婪模式与非贪婪模式</h2>
<p>正则表达式通常用于在文本中查找匹配的字符串。<br>贪婪模式，总是尝试匹配尽可能多的字符；<br>非贪婪模式则相反，总是尝试匹配尽可能少的字符。</p>
<h2 id="反斜杠问题">反斜杠问题</h2>
<p>Python原生字符串可以使用r”\“表示”\”。</p>
<h1 id="re模块">re模块</h1>
<hr>
<h2 id="Compile">Compile</h2>
<p>使用re步骤：</p>
<ol>
<li>先将正则表达式的字符串形式编译为Pattern实例。</li>
<li>然后使用Pattern实例处理文本并获得匹配结果。</li>
<li>最后使用Match实例获得信息，进行其他操作。</li>
</ol>
<h2 id="Match">Match</h2>
<p>Match对象是一次匹配的结果，包含了很多关于此次匹配的信息，可以使用Match提供的可读属性或方法来获取这些信息。</p>
<h2 id="Pattern">Pattern</h2>
<p>Pattern对象是一个编译好的正则表达式，通过Pattern提供的一系列方法可以对文本进行匹配查找。<br>Pattern不能直接实例化，必须使用re.compile()进行构造，也就是re.compile()返回的对象。<br>Pattern提供了几个可读属性用于获取表达式的相关信息：</p>
<ol>
<li>pattern：编译时用的表达式字符串</li>
<li>flags： 编译时用的匹配模式。数字形式。</li>
<li>groups：表达式中分组的数量。</li>
<li>groupindex：以表达式中有别名的组的别名为键、以该组对应的编号为值的字典，没有别名的组不包含在内。 </li>
</ol>
]]></content>
    
    
      <category term="python" scheme="http://www.abbeychenxi.net/tags/python/"/>
    
      <category term="爬虫" scheme="http://www.abbeychenxi.net/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python网络爬虫[五]]]></title>
    <link href="http://www.abbeychenxi.net/2014/09/07/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%5B%E4%BA%94%5D/"/>
    <id>http://www.abbeychenxi.net/2014/09/07/Python网络爬虫[五]/</id>
    <published>2014-09-06T16:00:11.000Z</published>
    <updated>2014-09-06T16:29:49.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Proxy设置">Proxy设置</h2>
<p>在程序中明确Proxy不受环境变量的影响</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">import</span> urllib2</div><div class="line"><span class="variable">enable_proxy =</span> True</div><div class="line"><span class="variable">proxy_handler =</span> urllib2.ProxyHandler({<span class="string">"http"</span>: 'http://some-proxy.com:<span class="number">8080</span>'})</div><div class="line"><span class="variable">null_proxy_handler =</span> urllib2.ProxyHandler({})</div><div class="line"><span class="keyword">if</span> enable_proxy:</div><div class="line">	<span class="variable">opener =</span> urllib2.build_opener(proxy_handler)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">	<span class="variable">opener =</span> urllib2.build_opener(null_proxy_handler)</div><div class="line">urllib2.install_opener(opener)</div></pre></td></tr></table></figure>

<h2 id="Timeout设置">Timeout设置</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">import</span> urllib2</div><div class="line"><span class="variable">response =</span> urllib2.urlopen('http://www.google.com', <span class="variable">timeout =</span> <span class="number">10</span>)</div></pre></td></tr></table></figure>

<h2 id="在HTTP_Request中加入特定的Header">在HTTP Request中加入特定的Header</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib2</div><div class="line">request = urllib2.Request(<span class="string">'http://www.baidu.com/'</span>)</div><div class="line">request.add_handler(<span class="string">'User-Agent'</span>, <span class="string">'fake-client'</span>)</div><div class="line">response = urllib2.urlopen(request)</div><div class="line"><span class="keyword">print</span> response.<span class="keyword">read</span>()</div></pre></td></tr></table></figure>

<h2 id="Redirect">Redirect</h2>
<p>urllib2 默认情况下会针对HTTP 3XX返回码自动进行redirect动作，无需人工配置。要检测是否发送了Redirect动作，只要检查Response的URL和Request的URL是否一致。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">import</span> urllib2</div><div class="line"><span class="variable">my_url =</span> 'http://www.google.cn'</div><div class="line"><span class="variable">response =</span> urllib2.urlopen(my_url)</div><div class="line"><span class="variable">redirected =</span> response.geturl() == my_url</div><div class="line">print redirected</div><div class="line"></div><div class="line"><span class="variable">my_url =</span> 'http://rrurl.cn/blUZup'</div><div class="line"><span class="variable">response =</span> urllib2.urlopen(my_url)</div><div class="line"><span class="variable">redirected =</span> response.geturl() == my_url</div><div class="line">print redirected</div></pre></td></tr></table></figure>

<h2 id="Cookie">Cookie</h2>
<p>urllib2对Cookie的处理也是自动的</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">import urllib2</div><div class="line">import cookielib</div><div class="line">cookie = cookielib.CookieJar()</div><div class="line">opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cookie))</div><div class="line">response = opener.<span class="built_in">open</span>(<span class="string">'http://www.baidu.com'</span>)</div><div class="line"><span class="keyword">for</span> <span class="keyword">item</span> <span class="operator">in</span> cookie:</div><div class="line">	print <span class="string">'Name = '</span>+<span class="keyword">item</span>.name</div><div class="line">	print <span class="string">'Value = '</span>+<span class="keyword">item</span>.<span class="built_in">value</span></div></pre></td></tr></table></figure>

<h2 id="使用HTTP的PUT和DELETE方法">使用HTTP的PUT和DELETE方法</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">import</span> urllib2</div><div class="line"><span class="variable">request =</span> urllib2.Request(uri, <span class="variable">data =</span> data)</div><div class="line">request.<span class="variable">get_method =</span> lambda: 'PUT'</div><div class="line"><span class="variable">response =</span> urllib2.urlopen(request)</div></pre></td></tr></table></figure>

<h2 id="得到HTTP的返回码">得到HTTP的返回码</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"><span class="keyword">try</span>:</div><div class="line">	response = urllib2.urlopen(<span class="string">'http://bbs.csdn.net/why'</span>)</div><div class="line"><span class="keyword">except</span> urllib2.HTTPError, e:</div><div class="line">	<span class="keyword">print</span> e.code</div></pre></td></tr></table></figure>

<h2 id="Debug_Log">Debug Log</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">import</span> urllib2</div><div class="line"><span class="variable">httpHandler =</span> urllib2.HTTPHandler(<span class="variable">debuglevel =</span> <span class="number">1</span>)</div><div class="line"><span class="variable">httpsHandler =</span> urllib2.HTTPSHandler(<span class="variable">debuglevel =</span> <span class="number">1</span>)</div><div class="line"><span class="variable">opener =</span> urllib2.build_opener(httpHandler, httpsHandler)</div><div class="line">urllib2.install_opener(opener)</div><div class="line"><span class="variable">response =</span> urllib2.urlopen('http://www.google.com')</div></pre></td></tr></table></figure>

<h2 id="表单处理">表单处理</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib</div><div class="line"><span class="keyword">import</span> urllib2</div><div class="line">postdata = urllib.urlencode({</div><div class="line">	'username': 'chenxi',</div><div class="line">	'password': 'why888',</div><div class="line">	'fk': '',</div><div class="line">	'login_submit': '登录'</div><div class="line">})</div><div class="line">req = urllib2.<span class="type">Request</span> (</div><div class="line">	url = 'http://secure.verycd.com/signin',</div><div class="line">	data = postdata</div><div class="line">)</div><div class="line"><span class="literal">result</span> = urllib2.urlopen(req)</div><div class="line">print <span class="literal">result</span>.read()</div></pre></td></tr></table></figure>

<h2 id="伪装成浏览器访问">伪装成浏览器访问</h2>
<p>修改http包中的header来实现</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="constant">headers</span> = {</div><div class="line">	'User-Agent': 'Mozilla/5.0 (windows; U; Windows NT 6.1; en-US; rv:1.9.1.6) gecko/20091201 Firefox/3.5.6'</div><div class="line">}</div><div class="line"><span class="constant">req</span> = urllib2.Request (</div><div class="line">	url = 'http://secure.verycd.com/signin/*/http://www.verycd.com/',</div><div class="line">	data = postdata,</div><div class="line">	headers = headers</div><div class="line">)</div></pre></td></tr></table></figure>

<h2 id="对付“反盗链”">对付“反盗链”</h2>
<p>把headers的referer改成该网站即可</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">headers = {</div><div class="line">	'Referer': 'http:<span class="comment">//www.cnbeta.com/articles'</span></div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    
    
      <category term="python" scheme="http://www.abbeychenxi.net/tags/python/"/>
    
      <category term="爬虫" scheme="http://www.abbeychenxi.net/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python网络爬虫[四]]]></title>
    <link href="http://www.abbeychenxi.net/2014/09/06/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%5B%E5%9B%9B%5D/"/>
    <id>http://www.abbeychenxi.net/2014/09/06/Python网络爬虫[四]/</id>
    <published>2014-09-06T15:49:25.000Z</published>
    <updated>2014-09-06T15:59:51.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Openers">Openers</h2>
<p>当你获取一个URL你使用一个opener(一个urllib2.OpenerDirector的实例)。</p>
<p>正常情况下， 我们使用默认opener: 通过urlopen。</p>
<h2 id="Handles">Handles</h2>
<p>Openers使用处理器handlers，每个handlers知道如何通过特定协议打开URLs，或者如何处理URL打开时的各个方面。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">import</span> urllib2</div><div class="line"></div><div class="line"><span class="variable">password_mgr =</span> urllib2.HTTPPasswordMgrWithDefaultRealm()</div><div class="line"></div><div class="line"><span class="variable">top_level_url =</span> <span class="string">"http://example.com/foo/"</span></div><div class="line"></div><div class="line">password_mgr.add_password(None, top_level_url, 'why', '<span class="number">123</span>')</div><div class="line"></div><div class="line"><span class="variable">handler =</span> urllib2.HTTPBasicAuthHandler(password_mgr)</div><div class="line"></div><div class="line"><span class="variable">opener =</span> urllib2.build_opener(handler)</div><div class="line"></div><div class="line"><span class="variable">a_url =</span> 'http://www.baidu.com/'</div><div class="line"></div><div class="line">opener.open(a_url)</div><div class="line"></div><div class="line">urllib2.install_opener(open)</div></pre></td></tr></table></figure>

]]></content>
    
    
      <category term="python" scheme="http://www.abbeychenxi.net/tags/python/"/>
    
      <category term="爬虫" scheme="http://www.abbeychenxi.net/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python网络爬虫[三]]]></title>
    <link href="http://www.abbeychenxi.net/2014/09/06/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%5B%E4%B8%89%5D/"/>
    <id>http://www.abbeychenxi.net/2014/09/06/Python网络爬虫[三]/</id>
    <published>2014-09-06T09:51:23.000Z</published>
    <updated>2014-09-06T15:46:02.000Z</updated>
    <content type="html"><![CDATA[<h2 id="HTTP异常处理">HTTP异常处理</h2>
<p>urlopen不能处理一个response时，产生urlError。</p>
<p>不过通常的Python APIs异常也会同时产生。</p>
<p>HTTPError是urlError的子类，通常在特定HTTP URLs中产生。</p>
<h1 id="URLError">URLError</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"></div><div class="line">req = urllib2.Request(<span class="string">'http://www.baidu.com'</span>)</div><div class="line"></div><div class="line"><span class="keyword">try</span>:</div><div class="line">	urllib2.urlopen(req)</div><div class="line"><span class="keyword">except</span> urllib2.URLError, e:</div><div class="line">	<span class="keyword">print</span> e.ereason</div></pre></td></tr></table></figure>

<h1 id="HTTPError">HTTPError</h1>
<p>服务器上每一个HTTP应答对象response包含一个数字“状态码”。</p>
<p>有时状态码指出服务器无法完成请求。默认的处理器会为你处理一部分这种应答。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib2</div><div class="line">req = urllib2.Request(<span class="string">'http://bbs.csdn.net/callmewhy'</span>)</div><div class="line"></div><div class="line"><span class="keyword">try</span>:</div><div class="line">	urllib2.urlopen(req)</div><div class="line">	</div><div class="line"><span class="keyword">except</span> urllib2.URLError, e:</div><div class="line">	<span class="keyword">print</span> e.code</div></pre></td></tr></table></figure>

<h1 id="Wrapping">Wrapping</h1>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> urllib2 <span class="keyword">import</span> Request, urlopen, URLError, HTTPError</div><div class="line"></div><div class="line">req = Request(<span class="string">'http://bbs.csdn.net/callmewhy'</span>)</div><div class="line"></div><div class="line"><span class="keyword">try</span>:</div><div class="line">	response = urlopen(req)</div><div class="line"></div><div class="line"><span class="keyword">except</span> URLError, e:</div><div class="line">	<span class="keyword">if</span> hasattr(e, <span class="string">'code'</span>):</div><div class="line">		<span class="keyword">print</span> <span class="string">'The server couldn\'t fulfill the request.'</span></div><div class="line">		</div><div class="line">		<span class="keyword">print</span> <span class="string">'Error code: '</span>, e.code</div><div class="line">	<span class="keyword">elif</span> has attr(e, <span class="string">'reason'</span>):</div><div class="line">		<span class="keyword">print</span> <span class="string">'We failed to reach a server.'</span></div><div class="line">		</div><div class="line">		<span class="keyword">print</span> <span class="string">'Reason:'</span>, e.reason</div><div class="line">		</div><div class="line"><span class="keyword">else</span>:</div><div class="line">	<span class="keyword">print</span> <span class="string">'No exception was raised.'</span></div></pre></td></tr></table></figure>

]]></content>
    
    
      <category term="python" scheme="http://www.abbeychenxi.net/tags/python/"/>
    
      <category term="爬虫" scheme="http://www.abbeychenxi.net/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python网络爬虫[二]]]></title>
    <link href="http://www.abbeychenxi.net/2014/09/06/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%5B%E4%BA%8C%5D/"/>
    <id>http://www.abbeychenxi.net/2014/09/06/Python网络爬虫[二]/</id>
    <published>2014-09-06T05:40:00.000Z</published>
    <updated>2014-09-06T08:24:35.000Z</updated>
    <content type="html"><![CDATA[<h2 id="urllib2">urllib2</h2>
<p>urllib2组件来抓取网页。<br>urllib2是python的一个获取URLs的组件。<br>它以urlopen函数的形式提供了一个简单的接口。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib2</div><div class="line">response = urllib2.urlopen(<span class="string">'http://www.baidu.com/'</span>)</div><div class="line">html = response.<span class="keyword">read</span>()</div><div class="line"><span class="keyword">print</span> html</div></pre></td></tr></table></figure>

<p>urllib2用一个response对象来映射你提出的http请求。</p>
<p>在HTTP请求时：</p>
<h1 id="发送data表单数据">发送data表单数据</h1>
<p>发送一些数据到URL，在HTTP中，这个经常使用POST请求发送。<br>这个通常在你提交一个HTML表单时由你的浏览器来做。<br>并不是所有的POSTs都来源于表单，能够使用POST提交任意的数据到自己的程序。<br>一般的HTML表单，data需要编码成标准形式。然后做为data参数传到Request对象。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> urllib</div><div class="line"><span class="keyword">import</span> urllib2</div><div class="line"></div><div class="line">url <span class="subst">=</span> <span class="string">'http://www.someserver.com/register.cgi'</span></div><div class="line"></div><div class="line">values <span class="subst">=</span> {<span class="string">'name'</span>: <span class="string">'WHY'</span>,</div><div class="line">		  <span class="string">'location'</span>: <span class="string">'SDU'</span>,</div><div class="line">		  <span class="string">'language'</span>: <span class="string">'Python'</span> }</div><div class="line"></div><div class="line"><span class="built_in">data</span> <span class="subst">=</span> urllib<span class="built_in">.</span>urlencode(values) <span class="comment">//编码工作</span></div><div class="line">req <span class="subst">=</span> urllib2<span class="built_in">.</span>Request(url, <span class="built_in">data</span>) <span class="comment">// 发送请求同时传data表单</span></div><div class="line">response <span class="subst">=</span> urllib2<span class="built_in">.</span>urlopen(req) <span class="comment">//接受反馈的信息</span></div><div class="line">the_page <span class="subst">=</span> response<span class="built_in">.</span>read() <span class="comment">//读取反馈的内容</span></div></pre></td></tr></table></figure>

<p>如果没有传送data参数，urllib2使用GET方式的请求。<br>GET和POST请求的不同之处是POST请求通常有“副作用”，<br>它们会由于某种途径改变系统状态。<br>Data同样可以通过在Get请求的URL本身上面编码来传送。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="import"><span class="keyword">import</span> urllib2</span></div><div class="line"><span class="import"><span class="keyword">import</span> urllib</span></div><div class="line"></div><div class="line"><span class="typedef"><span class="keyword">data</span> = <span class="container">{}</span></span></div><div class="line"></div><div class="line"><span class="typedef"><span class="keyword">data</span>['name'] = '<span class="type">WHY'</span></span></div><div class="line"><span class="typedef"><span class="keyword">data</span>['location'] = '<span class="type">SDU'</span></span></div><div class="line"><span class="typedef"><span class="keyword">data</span>['language'] = '<span class="type">Python'</span></span></div><div class="line"></div><div class="line"><span class="title">url_values</span> = urllib.urlencode(<span class="typedef"><span class="keyword">data</span>)</span></div><div class="line"><span class="title">print</span> url_value</div><div class="line"></div><div class="line"><span class="title">name</span> = <span class="type">Somebody</span>+<span class="type">Here</span>&language=<span class="type">Python</span>&location=<span class="type">Northampton</span></div><div class="line"><span class="title">url</span> = 'http://www.example.com/example.cgi'</div><div class="line"><span class="title">full_url</span> = url + '?' + url_values</div><div class="line"></div><div class="line"><span class="typedef"><span class="keyword">data</span> = urllib2.open<span class="container">(<span class="title">full_url</span>)</span></span></div></pre></td></tr></table></figure>

<p>这就实现了Data数据的Get传送。</p>
<h1 id="设置Headers到http请求">设置Headers到http请求</h1>
<p>有一些站点不喜欢被程序访问，或者发送不同版本的内容到不同的浏览器。<br>浏览器确认自己身份是通过User-Agent头，当你创建了一个请求对象，你可以给他一个包含头数据的字典。</p>
]]></content>
    
    
      <category term="python" scheme="http://www.abbeychenxi.net/tags/python/"/>
    
      <category term="爬虫" scheme="http://www.abbeychenxi.net/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python网络爬虫[一]]]></title>
    <link href="http://www.abbeychenxi.net/2014/09/04/Python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB%5B%E4%B8%80%5D/"/>
    <id>http://www.abbeychenxi.net/2014/09/04/Python网络爬虫[一]/</id>
    <published>2014-09-04T15:39:08.000Z</published>
    <updated>2014-09-04T16:01:12.000Z</updated>
    <content type="html"><![CDATA[<h2 id="URI">URI</h2>
<p>URI通常由三部分组成：</p>
<ol>
<li>访问资源的命名机制；</li>
<li>存放资源的主机名</li>
<li>资源自身的名称，由路径表示</li>
</ol>
<p>URI定义:统一资源标识符<br>URL定义:统一资源定位符</p>
<p>爬虫最主要的处理对象就是URL，它根据URL地址取得所需要的文件内容，然后对它进行进一步的处理。</p>
]]></content>
    
    
      <category term="python" scheme="http://www.abbeychenxi.net/tags/python/"/>
    
      <category term="爬虫" scheme="http://www.abbeychenxi.net/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[today]]></title>
    <link href="http://www.abbeychenxi.net/2014/09/04/today/"/>
    <id>http://www.abbeychenxi.net/2014/09/04/today/</id>
    <published>2014-09-03T20:09:48.000Z</published>
    <updated>2014-09-03T20:42:11.000Z</updated>
    <content type="html"><![CDATA[<p>今天入学教育，正式成为了NJU的一名学生。<br>晚上成功搭建了自己的个人博客！<br>I’m so happy!<br>Thanks everyone!</p>
]]></content>
    
    
      <category term="NJU" scheme="http://www.abbeychenxi.net/tags/NJU/"/>
    
  </entry>
  
</feed>
